@page "/"
@using WeatherForecast.Models
@using WeatherForecast.Shared
@using System.Text
@inject HttpClient Http
@inject IJSRuntime js


@if(forecast == null)
{
	<p><em>@message</em></p>
}
else
{
	<div class="card-group">
		@foreach(var item in forecast.Daily.Take(5))
		{
			<DailyForecast
				Seconds="@item.Dt"
				LowTemp="@item.Temp.Min"
				HighTemp="@item.Temp.Max"
				Description="@item.Weather[0].Description"
				Icon="@item.Weather[0].Icon" />
		}
	</div>
}

@code{
	string message = "Loading...";
	Position? pos;
	OpenWeather? forecast;

	protected override async Task OnInitializedAsync(){
		try
		{
			await GetPosition();
			await GetForecast();
		}
		catch (Exception)
		{
			message = "Error Encountered.";
		}
	}

	private async Task GetPosition()
	{
		pos = await js.InvokeAsync<Position>("jsInterop.getPosition");
	}

	private async Task GetForecast()
	{
		string APIKey = "8f6ace025f4d64f8ead83f3b91de6ee5";
		StringBuilder url = new StringBuilder();
		url.Append("https://api.openweathermap.org");
		url.Append("/data/2.5/onecall?");
		url.Append("lat=");
		url.Append(pos.Latitude);
		url.Append("&lon=");
		url.Append(pos.Longitude);
		url.Append("&exclude");
		url.Append("current,minutely,hourly,alerts");
		url.Append("&units=imperial");
		url.Append("&appid=");
		url.Append(APIKey);

		forecast = await Http.GetFromJsonAsync<OpenWeather>(url.ToString());
	}

}
